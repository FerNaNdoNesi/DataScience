lista_caracter = list('A', 'Bem-vindo', 'DSA')
lista_caracter
lista_inteiros = list(2, 3, 4)
lista_inteiros
# Lista de floats
lista_numerico = list(1.90, 45.3, 300.5)
lista_numerico
# Lista de numeros complexos
lista_complexos = list(5.2+3i, 2.4+8i)
lista_complexos
# Lista de valores logicos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
# Listas Compostas
lista_composta1 = list("A", 3, TRUE)
lista_composta1
lista1 <- list(1:10, c("Maria", "Joao", "Alfredo"), rnorm(10))
lista1
?rnorm
?rnorm
lista1
# Slicing da Lista
lista1[1]
lista1[c(1,2)]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
lista1[[2]]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
lista1[[2]][1] = "Fernando"
lista1
lista1[[2]][3] = "NESI"
lista1
names(lista1) <- c("inteiros", "caracteres", "numericos")
lista1
lista1
vec_num <- 1:4
lista1
vec_char <- c("A", "B", "C", "D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
lista2 <- list(elemento1=3:5, elemento2=c(7.2,3.5))
lista2
names(lista1) <- c("inteiros", "caracteres", "numericos")
lista1
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
length(lista1)
# Podemos extrair um elemento especÃƒ­fico dentro de cada nivel da lista
lista1$caracteres[2]
lista1$caracteres[1]
lista1$caracteres[3]
lista1$caracteres[3] = "Nesi
lista1$caracteres[3] = "Nesi"
lista1$caracteres[3]
lista1$caracteres[3] = "Nesi"
lista1$caracteres[3]
lista1$caracteres[1]
lista1$caracteres[3]
lista1$caracteres
# Mode dos elementos
mode(lista1$numericos)
mode(lista1$caracteres)
# Combinando 2 listas
lista3 <- c(lista1, lista2)
lista3
v = c(1:3)
v
l  = as.list(v)
l
# Unindo 2 elementos em uma lista
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
lst = list(mat, vec)
lst
texto <- "Isso eh uma string!"
texto
texto
x = as.character(3.14)
x
class(x)
x
class(x)
# String
texto <- "Isso eh uma string!"
texto
x = as.character(3.14)
x
class(x)
nome = "Barack"; sobrenome = "Obama"
paste(nome, sobrenome)
cat(nome, sobrenome)
nome = "Barack"; sobrenome = "Obama"
a <- paste(nome, sobrenome)
b <- cat(nome, sobrenome)
a
b
sprintf("%s governa os EUA hÃƒÂ¡ %d anos", "Barack Obama", 8)
texto <- "Isso eh uma string!"
substr(texto, start=12, stop=17)
?substr
b <- substr(texto, start=12, stop=17)
b
b <- substr(texto, start=5, stop=17)
b
nchar(texto)
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
library(stringr)
strsplit("Histogramas e Elementos de Dados", " ")
strsplit("Histogramas e Elementos de Dados", "e")
string1 <- c("Esta ÃƒÂ© a primeira parte da minha string e serah a primeira parte do meu vetor",
string1
strsplit("Histogramas e Elementos de Dados", NULL)
?strsplit
strsplit("Histogramas e Elementos de Dados", NULL)
strsplit("Histogramas e Elementos de Dados", " ")
string1
string1 <- c("Esta ÃƒÂ© a primeira parte da minha string e serah a primeira parte do meu vetor",
"Aqui a minha string continua, mas serÃƒÂ¡ transformada no segundo vetor")
string1
str_c(c(string1, string2), sep="")
str_c(c(string1, string2), sep="")
string2 <- c("Precisamos testar outras strings - @???!Ã‚Â§$",
"AnÃƒÂ¡lise de Dados em R")
string2
string2 <- c("Precisamos testar outras strings - @???!Ã‚Â§$",
"AnÃƒÂ¡lise de Dados em R")
string2 <- c("Precisamos testar outras strings - @???!Ã‚Â§$",
"AnÃƒÂ¡lise de Dados em R")
string2
string1 <- c("Esta ÃƒÂ© a primeira parte da minha string e serah a primeira parte do meu vetor",
"Aqui a minha string continua, mas serÃƒÂ¡ transformada no segundo vetor")
string1
string2 <- c("Precisamos testar outras strings - @???!Ã‚Â§$",
"AnÃƒÂ¡lise de Dados em R")
string2
string2 <- c("Precisamos testar outras strings",
"Anaise de Dados em R")
string2
str_c(c(string1, string2), sep="")
str_count(string2, "s")
str_count(str_c(c(string1, string2), sep=""), "s")
str_locate_all(string2, "s")
str_count(string2, "s")
str_locate_all(string2, "s")
str_locate_all(string2, "s")
str_replace(string2, "\\s", "")
str_replace_all(string2, "\\s", "")
string1 <- "23 mai 2000"
string2 <- "1 mai 2000"
padrao <- "mai 20"
grepl(pattern = padrao, x = string1)
padrao <- "mai20"
grepl(pattern = padrao, x = string1)
arquivo <- read.csv("http://www.gutenberg.org/cache/epub/100/pg100.txt")
head(arquivo)
tail(arquivo)
str_count(arquivo, "7")
str_locate_all(arquivo, "7")
strtail <- function(s,n=1) {
if(n<0)
substring(s,1-n)
else
substring(s,nchar(s)-n+1) }
strtail("String de teste", 6)
strtail("String de teste", -6)
strtail("String de teste", -1)
strtail("String de teste", 1)
strtail("String de teste", -1)
strtail("String de teste", -0)
strtail("String de teste", 0)
# Criando um dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nomes <- character()
idades <- numeric()
datas <- as.Date(character())
codigos <- integer()
df <- data.frame(c(nomes, idades, datas, codigos))
df
# Criando vetores
pais = c("EUA", "Dinamarca", "Holanda", "Espanha", "Brasil")
nome = c("Mauricio", "Pedro", "Aline", "Beatriz", "Marta")
altura = c(1.78, 1.72, 1.63, 1.59, 1.63)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando um dataframe de diversos vetores
pesquisa = data.frame(pais, nome, altura, codigo)
pesquisa
View(pesquisa)
olhos = c("verde", "azul", "azul", "castanho", "castanho")
pesq = cbind(pesquisa, olhos)
pesq
str(pesq)
dim(pesq)
length(pesq)
pesq$pais
pesq$nome
pesq[1,1]
pesq[3,2]
nrow(pesq)
ncol(pesq)
head(pesq)
head(mtcars)
mtcars
tail(pesq)
tail(mtcars)
?mtcars
mtcars
aa <- mtcars
View(aa)
pesq[altura < 1.60,]
pesq[altura < 1.60,]
pesq[altura < 1.60, c('codigo', 'olhos')]
pesq
names(pesq) <- c("Pais", "Nome", "Altura", "Codigo", "Olhos")
pesq
names(pesq) <- c("PaÃ­s", "Nome", "Altura", "Codigo", "Olhos")
pesq
colnames(pesq) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(pesq) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
pesq
names(pesq) <- c("PaÃ­s", "Nome", "Altura", "Codigo", "Olhos")
pesq
?read.csv
df2 <- data.frame(read.csv(file = 'dframe.csv', header = TRUE, sep = ","))
head(df2)
summary(df2)
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
x = 25
if (x < 30)
{"Este numero ÃƒÂ© menor que 30"}
# Chaves nÃƒÂ£o sÃƒÂ£o obrigatorios, mas altamente recomendados
if (x < 30)
"Este numero eh menor que 30"
# Else
if (x < 7) {
"Este nÃƒÂºmero eh menor que 7"
} else {
"Este nÃƒÂºmero nao eh menor que 7"
}
# Comandos podem ser aninhados
x = 7
if (x < 7) {
"Este numero eh menor que 7"
} else if(x == 7) {
"Este ÃƒÂ© o numero 7"
}else{
"Este numero nao eh menor que 7"
}
# Ifelse
x = 5
ifelse (x < 6, "Correto", NA)
x = 9
ifelse (x < 6, "Correto", NA)
# Expressoes ifelse aninhadas
x = c(7,5,4)
ifelse(x < 5, "Menor que 5",
ifelse(x == 5, "Igual a 5", "Maior que 5"))
# Estruturas if dentro de funcoes
func1 <- function(x,y){
ifelse(y < 7, x + y, "NÃƒÂ£o encontrado")
}
func1(4,2)
func1(40,7)
# Rep
rep(rnorm(10), 5)
x = 1
repeat {
x = x + 3
if (x > 99)
break
print(x)}
for (i in 1:20) {print(i)}
for (q in rnorm(10)) {print(q)}
# Ignora alguns elementos dentro do loop
for(i in 1:22){
if(i == 13 | i == 15)
next
print (i)}
# Interromper o loop
for(i in 1:22){
if(i == 13)
break
print (i)}
# Loop While
x = 1
while(x < 5){
x = x + 1
print(x)
}
# Loop While
x = 1
while(x < 5){
#x = x + 1
print(x)
}
# Loop While
x = 1
while(x < 5){
x = x + 1
print(x)
}
# O loop while nÃƒÂ£o sera executado
y = 6
while(y < 5){
y = y+10
print(y)
}
# Exercicio 1 - Crie um vetor com 12 numeros inteiros
vec <- c(1:12)
vec
# Exercicio 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com numeros inteiros
mat <- matrix(c(1:16), nrow = 4, ncol = 4)
mat
lst <- list(vec, mat)
lst
df <- data.frame(read.table("http://data.princeton.edu/wws509/datasets/effort.dat"))
class(df)
df
names(df) = c("col1", "col2", "col3")
df
# Exercicio 6 - Imprima na tela o dataframe iris, verifique quantas dimensoes existem no dataframe iris, imprima um resumo do dataset
iris
class(iris)
dim(iris)
summary(iris)
str(iris)
class(iris)
dim(iris)
summary(iris)
str(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
iris1 <- subset(iris, Sepal.Length > 7)
iris1
novo_iris <- iris
novo_iris
install.packages("dplyr")
?slice
library(dplyr)
?slice
slice(novo_iris, 1:15)
novo_iris
novo_iris_15 <- slice(novo_iris, 1:15)
novo_iris_15
